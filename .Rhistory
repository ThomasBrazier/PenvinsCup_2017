source("checkPenvins.R")
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
View(tmp)
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
View(quadTableAll)
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to globla data.frame
} else {
warning("File", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
cat("Proceeding to next file...\n")
}
}
indTableAll = data.frame() # empty table for individuals
# Compile all .txt ind files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
cat("Proceeding to next file...\n")
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap", "sp", "haut", "larg", "peri", "pred", "coul", "text", "epizo", "masse") # remove any name of column with correct name
indTableAll = rbind(indTableAll, tmp) # add temp data.frame to global data.frame
} else {
warning("File ind", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
}
}
cat("All Ind files in One")
quadTableAll = data.frame() # empty table for quadrats
# Compile all .txt quad files into one data.frame
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
cat("Proceeding to next file...\n")
if (grepl("ind", list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])) { # only if this is an ind file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
cat("Processing", as.character(tmp[2,1]), "ind by", as.character(tmp[2,2]),".\n")
if (ncol(tmp) == 43) { # verifying compatibility of the file by number of col
colnames(tmp) = c("transect", "resp", "date", "coef", "mode", "d.chenal", "d.mer", "alt", "surf", "p.roc", "p.moul", "p.huit", "p.bala", "p.alg", "p.encr", "p.eau", "s.flaq", "d.flaq", "Bitret", "Gibcin", "Gibsp.", "Gibtum", "Litlit", "Litobt", "Litrud", "Litsax", "Monlin", "Nasinc", "Naspyg", "Nasret", "Oceeri", "Patsp.", "Rispar", "Thalap") # remove any name of column with correct name
quadTableAll = rbind(quadTableAll, tmp) # add temp data.frame to global data.frame
} else {
warning("File quad", tmp[1], "by", tmp[2],"not added to global data frame : not the required number of columns.\n")
}
}
}
cat("All Quad files in One")
cat("End of the work")
str(indTableAll)
str(quadTableAll)
View(quadTableAll)
quadTableAll = quadTableAll[-35:-43]
str(quadTableAll)
# checkPenvins
checkPenvins(indTableAll)
checkPenvins(quadTableAll)
indTableAll
min(indTableAll$haut)
max(indTableAll$haut)
min(indTableAll$haut, na.rm = TRUE)
max(indTableAll$haut, na.rm = TRUE)
max(indTableAll$haut/indTableAll$larg, na.rm = TRUE)
min(indTableAll$haut/indTableAll$larg, na.rm = TRUE)
max(indTableAll$larg/indTableAll$haut, na.rm = TRUE)
min(indTableAll$larg/indTableAll$haut, na.rm = TRUE)
min(indTableAll$peri/indTableAll$larg, na.rm = TRUE)
max(indTableAll$peri/indTableAll$larg, na.rm = TRUE)
which(min(indTableAll$peri/indTableAll$larg, na.rm = TRUE))
?which
which(indTableAll, min(indTableAll$peri/indTableAll$larg, na.rm = TRUE))
ind <- read.table("data/b30indCORR.txt", header = TRUE)
setwd("~/Documents/GitHub/PenvinsCup_2017")
ind <- read.table("data/b30indCORR2.txt", header = TRUE)
quad <- read.table("data/b30quadCORR2.txt", header = TRUE)
source("checkPenvins.R")
checkPenvins(ind)
source("checkPenvins.R")
checkPenvins(ind)
source("checkPenvins.R")
checkPenvins(ind)
source("checkPenvins.R")
checkPenvins(ind)
source("checkPenvins.R")
checkPenvins(ind)
# AVEC fichier txt d'erreurs
checkPenvins(ind, bilan = T)
source("checkPenvins.R")
# AVEC fichier txt d'erreurs
checkPenvins(ind, bilan = T)
source("checkPenvins.R")
checkPenvins(ind)
install.packages("tidyverse")
library(tidyverse)
install.packages("ggmap")
library(ggmap)
install.packages("ade4")
library(ade4)
#=====================================================#
#                       MAP
#=====================================================#
qmap("Rennes")
?qmap
#=====================================================#
#                       MAP
#=====================================================#
get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = "auto")
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = "auto"))
?get_map
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = "auto", maptype = "satellite"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 13, maptype = "satellite"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 1, maptype = "satellite"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 21, maptype = "satellite"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 21, maptype = "toner", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 21, scale = "auto", maptype = "toner", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 21, scale = "auto", maptype = "hybrid", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 21, scale = "auto", maptype = "terrain-background", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 21, scale = "auto", maptype = "terrain-background", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "terrain-background", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "terrain", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "satellite", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "satellite", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lat = 47.490089, lon = 2.682917), zoom = 18, scale = "auto", maptype = "satellite", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "satellite", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "esri-topo", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "esri-topo", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_openstreetmap(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "esri-topo", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_openstreetmap(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = 5, maptype = "esri-topo", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_openstreetmap(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = 18, maptype = "esri-topo", source = "osm"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_openstreetmap(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "terrain-lines", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_openstreetmap(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, scale = "auto", maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_openstreetmap(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 18, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = 2.682917), zoom = 10, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = -2.682917), zoom = 10, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = 47.490089, lat = -2.682917), zoom = 3, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 3, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 15, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 18, maptype = "terrain", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 18, maptype = "satellite", source = "google"))
#=====================================================#
#                       MAP
#=====================================================#
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "satellite", source = "google"))
?ggmap
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "satellite", source = "google"), darken = c(0, "black")
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "satellite", source = "google"), darken = c(0, "black"))
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "satellite", source = "google"))
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "hybrid", source = "google"))
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "terrain", source = "stamen"))
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "terrain-background", source = "google"))
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "terrain-background", source = "google"))
ggmap(get_map(location = c(lon = -2.682917, lat = 47.490089), zoom = 17, maptype = "terrain", source = "google"))
ind <- read.table("data/a0indCORR2.txt", header = TRUE)
source("checkPenvins.R")
# Working directory
setwd("~/Documents/GitHub/PenvinsCup_2017")
source("checkPenvins.R")
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
#checkPenvins(list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])
}
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
checkPenvins(list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])
}
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp)
}
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp)
readline(prompt="Press [enter] to continue")
}
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = TRUE)
readline(prompt="Press [enter] to continue")
}
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = TRUE)
readline(prompt="Press [enter] to continue")
}
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = TRUE)
readline(prompt="Press [enter] to continue")
}
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = TRUE)
readline(prompt="Press [enter] to continue")
}
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = TRUE)
readline(prompt="Press [enter] to continue")
}
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = TRUE)
readline(prompt="Press [enter] to continue")
}
tmp[4,35]
tmp
### Affichage du fichier d'erreur
file.show("tests_summary.txt")
# Arreter le sink()
sink(type="output") # stop sinking
sink(type="message") # stop sinking
close(testSummary)
tmp[4,35]
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[1], sep = ""), header = TRUE)
tmp[1,35]
var = tmp[1,35]
var
print(var)
# Working directory
setwd("~/Documents/GitHub/PenvinsCup_2017")
source("checkPenvins.R")
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
readline(prompt="Press [enter] to continue")
}
checkPenvins(tmp)
source("checkPenvins.R")
checkPenvins(tmp)
source("checkPenvins.R")
#####################
# Running a serie of checkPenvins over each file
for (f in 1:length(list.files(path = "~/Documents/Github/PenvinsCup_2017/data"))) {
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
readline(prompt="Press [enter] to continue")
}
# Running only one checkPenvins at once
f = 1 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 2 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 2 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 2 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 3 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
# Running only one checkPenvins at once
f = 3 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
View(tmp)
# Running only one checkPenvins at once
f = 4 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
View(tmp)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
# Working directory
setwd("~/Documents/GitHub/PenvinsCup_2017")
source("checkPenvins.R")
# Running only one checkPenvins at once
f = 5 # index of file
tmp = read.table(paste("data/",list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f], sep = ""), header = TRUE)
checkPenvins(tmp, bilan = FALSE)
list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f]
print(list.files(path = "~/Documents/Github/PenvinsCup_2017/data")[f])
