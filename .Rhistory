K = 220
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
if (solution>(sum(soLog)-Nb)^2) {
solution=(sum(soLog)-Nb)^2
solutionR = r[i]
}
cat(solution)
}
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
if (solution>(sum(soLog)-Nb)^2) {
solution=(sum(soLog)-Nb)^2
solutionR = r[i]
}
cat(solution)
}
solutionR
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
if (solution>(sum(soLog)-Nb)^2) {
solution=(sum(soLog)-Nb)^2
solutionR = r[i]
}
cat(solution)
}
# Modele logistique
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
if (solution>(sum(soLog)-Nb)^2) {
solution=(sum(soLog)-Nb)^2
solutionR = r[i]
}
cat(solution)
}
solutionR
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
if (solution>((sum(soLog)-sum(Nb))^2)) {
solution=(sum(soLog)-Nb)^2
solutionR = r[i]
}
cat(solution)
}
solutionR
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
if (solution>((sum(soLog-Nb)^2))) {
solution=(sum(soLog)-Nb)^2
solutionR = r[i]
}
cat(solution)
}
solutionR
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[i] - Nb[i])^2
}
if (solution>sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[i] - Nb[i])^2
}
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[i] - Nb[i])^2
}
cat("sumEcarts")
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
# Modele logistique
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[i] - Nb[i])^2
}
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
View(soLog)
View(soLog)
# Modele logistique
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[i,2] - Nb[i])^2
}
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[2,i] - Nb[i])^2
}
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
soLog[1]
soLog <- ode(y = N0, times = temps, func = logistiq, parms = r)
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[i] - Nb[i])^2
}
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
# Modele logistique
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = 0
for (j in 1:length(Nb)) {
sumEcarts = sumEcarts + (soLog[j] - Nb[j])^2
}
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
solutionR
# test de la valeur calculée
r = 0.001
soLog <- ode(y = N0, times = temps, func = logistiq, parms = r)
lines(soLog, col="green")
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.001,10,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = sum(abs(soLog-Nb))
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
solutionR
# Modele logistique
logistiq <- function(t,N,r) {
K = 109
list(r*N*(1-N/K))
}
N0 = 2
r = seq(0.02,0.03,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
for (i in 1:length(r)) {
ri = r[i]
soLog <- ode(y = N0, times = Dates, func = logistiq, parms = ri)
sumEcarts = sum(abs(soLog-Nb))
if (solution > sumEcarts) {
solution=sumEcarts
solutionR = r[i]
}
cat(solution)
}
solutionR
# test de la valeur calculée
r = 0.023
soLog <- ode(y = N0, times = temps, func = logistiq, parms = r)
lines(soLog, col="green")
# tracer les donnes
plot(Dates, Nb, type="line", col ="blue")
lines(soLog, col="green")
# Modele logistique
logistiq <- function(t,N,r,K) {
list(r*N*(1-N/K))
}
# Modele logistique
logistiq <- function(t,N,r,K) {
list(r*N*(1-N/K))
}
N0 = 2
## Solution cours
K = 109
R=seq(0.02, 0.03, 0.001)
SEl = NULL
for (r in R) {
sol = ode(y = N0, times = Dates, func = logistiq, params = c(r,K))
SE = sum(abs(sol-Nb))
SEl = c(SEl, SE)
}
# Modele logistique
logistiq <- function(t,N,param) {
c = param[1]
K = param[2]
list(r*N*(1-N/K))
}
K = 109
N0 = 2
## Solution cours
K = 109
R=seq(0.02, 0.03, 0.001)
SEl = NULL
for (r in R) {
sol = ode(y = N0, times = Dates, func = logistiq, params = c(r,K))
SE = sum(abs(sol-Nb))
SEl = c(SEl, SE)
}
# Modele logistique
logistiq <- function(t,N,param) {
c = param[1]
K = param[2]
list(r*N*(1-N/K))
}
K = 109
N0 = 2
r = seq(0.02,0.03,0.001)
temps=seq(from = 0, to = 400, by = 0.02)
solution=100000000
solutionR = 0
## Solution cours
K = 109
R=seq(0.02, 0.03, 0.001)
SEl = NULL
for (r in R) {
sol = ode(y = N0, times = Dates, func = logistiq, params = c(r,K))
SE = sum(abs(sol[,2]-Nb))
SEl = c(SEl, SE)
}
## Solution cours
K = 109
R=seq(0.02, 0.03, 0.001)
SEl = NULL
for (r in R) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(r,K))
SE = sum(abs(sol[,2]-Nb))
SEl = c(SEl, SE)
}
R[which.min(SEl)]
SEl = data.frame()
# Estimation du couple (r,K)
Dates <- c(0,30,50,70,100,130,150,170,200, 230, 250,300, 350,370, 400)
Nb <- c(2, 5, 9, 12, 19, 30, 41, 53, 72, 88, 95, 104, 108, 108, 109)
# tracer les donnes
plot(Dates, Nb, type="line", col ="blue")
# Estimation
logistiq <- function(t,N,param) {
c = param[1]
K = param[2]
list(r*N*(1-N/K))
}
N0 = 2
K = seq(0,300,1)
R=seq(0.02, 0.03, 0.001)
SEl = data.frame()
for (r in R) {
for (k in K) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(r,k))
SE = sum(abs(sol[,2]-Nb))
SEl[r,k] = SE
}
}
SEl = data.frame()
for (r in R) {
for (k in K) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(r,k))
SE = sum(abs(sol[,2]-Nb))
cat(SE)
SEl[r,k] = SE
}
}
r=0.023
k=100
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(r,k))
for (r in R) {
for (k in K) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(r,k))
SE = sum(abs(sol[,2]-Nb))
cat(SE)
SEl[r,k] = SE
}
}
N0 = 2
K = seq(0,300,1)
R=seq(0.02, 0.03, 0.001)
SEl = data.frame()
for (i in 1:length(R)) {
for (j in 1:length(K)) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(R[i],K[j]))
SE = sum(abs(sol[,2]-Nb))
SEl[i,j] = SE
}
}
logistiq <- function(t,N,param) {
c = param[1]
K = param[2]
list(r*N*(1-N/K))
}
N0 = 2
K = seq(0,300,1)
R=seq(0.02, 0.03, 0.001)
SEl = data.frame()
for (i in 1:length(R)) {
for (j in 1:length(K)) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(R[i],K[j]))
SE = sum(abs(sol[,2]-Nb))
SEl[i,j] = SE
}
}
# Estimation
logistiq <- function(t,N,param) {
r = param[1]
K = param[2]
list(r*N*(1-N/K))
}
N0 = 2
K = seq(0,300,1)
R=seq(0.02, 0.03, 0.001)
SEl = data.frame()
for (i in 1:length(R)) {
for (j in 1:length(K)) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(R[i],K[j]))
SE = sum(abs(sol[,2]-Nb))
SEl[i,j] = SE
}
}
K = seq(1,300,1)
R=seq(0.02, 0.03, 0.001)
SEl = data.frame()
for (i in 1:length(R)) {
for (j in 1:length(K)) {
sol = ode(y = N0, times = Dates, func = logistiq, parms = c(R[i],K[j]))
SE = sum(abs(sol[,2]-Nb))
SEl[i,j] = SE
}
}
setwd("~/Documents/GitHub/PenvinsCup_2017")
ind <- read.table("b30ind.txt", header = TRUE, sep=",")
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
source("checkPenvins.R")
checkPenvins(quad)
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
source("checkPenvins.R")
checkPenvins(quad)
file.show("tests_summary.txt")
ind <- read.table("b30ind.txt", header = TRUE, sep=",")
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
source("checkPenvins.R")
checkPenvins(quad)
