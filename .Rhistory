?labels
?ncol
?sink
?stop
?sink
?warning
is.numeric("NA")
is.numeric(NA)
list=c(1,2,4,"NA",6)
is.numeric(list[1])
varO=list[1]
is.numeric(varO)
?is.numeric
a=4
is.numeric(a)
fonction<-function(a){}
a=5
fonction<-function(a){
is.numeric(a)
}
fonction(a)
liste=c(1,2,4,"NA",6)
a=liste[4]
fonction<-function(a){
is.numeric(a)
}
fonction(a)
a=liste[3]
fonction<-function(a){
is.numeric(a)
}
fonction(a)
liste=c(1,2,4,"NA",6)
a=liste[3]
fonction<-function(a){
is.na(a)
}
fonction(a)
a=liste[4]
fonction<-function(a){
is.na(a)
}
fonction(a)
a=liste[3]
fonction<-function(a){
return(is.numeric(a))
}
fonction(a)
is.numeric(liste[1])
as.numeric(liste)
liste
is.numeric(liste[1])
?methods(is)
as.numeric(liste[1])
is.numeric(liste[1])
is.numeric(as.numeric(liste[1]))
is.numeric(as.numeric(liste[4]))
as.numeric(liste)
is.numeric(liste)
is.numeric(liste[1])
is.double(liste[1])
a=liste[1]
is.numeric(a)
a
a=1
a
a=as.numeric(liste[1])
a
is.numeric(a)
a=as.numeric(liste[4])
a
is.numeric(a)
is.na(a)
a=as.numeric(liste1)
a
a=as.numeric(liste[1])
a
is.na(a)
a=liste[1]
a
a=as.numeric(a)
a
a=liste[1]
b=liste[2]
a+b
?popbio
??popbio
help("Caswell")
help("Morris")
??Morris
?stage.vector.plot
library(popbio)
?stage.vector.plot
eigUrsus = eigen.analysis(UrsusMean)
fundamental.matrix(UrsusMean$T)$N
# Recuperation des donnees
idUrsus <- which(comadre$metadata$SpeciesAccepted == "Ursus_maritimus")
cat(idUrsus)
# 6 matrices issues de l'etude de Hunter, Caswell, Runge et al. (2010)
comadre$metadata[idUrsus,]
# recuperer les references bibliographiques
biblio <- comadre$metadata[idUrsus, c("Authors", "Journal", "YearPublication","DOI.ISBN")]
biblio
# recuperer les 6 matrices 2001-2005
UrsusMean <- comadre$mat[[idUrsus[1]]]$matA # Matrice de la valeur moyenne sur les 5 années
# Matrices annuelles
Ursus2001 <- comadre$mat[[idUrsus[2]]]$matA
Ursus2002 <- comadre$mat[[idUrsus[3]]]$matA
Ursus2003 <- comadre$mat[[idUrsus[4]]]$matA
Ursus2004 <- comadre$mat[[idUrsus[5]]]$matA
Ursus2005 <- comadre$mat[[idUrsus[6]]]$matA
UrsusMean
Ursus2001
Ursus2002
Ursus2003
Ursus2004
Ursus2005
# identifier les classes de la matrice
stages <- comadre$matrixClass[[idUrsus[1]]]$MatrixClassAuthor
stages
fundamental.matrix(UrsusMean$T)$N
#-----------------------------------#
# DONNEES
#-----------------------------------#
# Chargement des donnees et packages
load("COMADRE_v.2.0.1.RData")
if (!require(popbio)) install.packages("popbio")
library(popbio)
# Recuperation des donnees
idUrsus <- which(comadre$metadata$SpeciesAccepted == "Ursus_maritimus")
cat(idUrsus)
# 6 matrices issues de l'etude de Hunter, Caswell, Runge et al. (2010)
comadre$metadata[idUrsus,]
# recuperer les references bibliographiques
biblio <- comadre$metadata[idUrsus, c("Authors", "Journal", "YearPublication","DOI.ISBN")]
biblio
# recuperer les 6 matrices 2001-2005
UrsusMean <- comadre$mat[[idUrsus[1]]]$matA # Matrice de la valeur moyenne sur les 5 années
# Matrices annuelles
Ursus2001 <- comadre$mat[[idUrsus[2]]]$matA
Ursus2002 <- comadre$mat[[idUrsus[3]]]$matA
Ursus2003 <- comadre$mat[[idUrsus[4]]]$matA
Ursus2004 <- comadre$mat[[idUrsus[5]]]$matA
Ursus2005 <- comadre$mat[[idUrsus[6]]]$matA
setwd("~/Dropbox/M1 EFCE/Cours S1/POC/Rapport")
#-----------------------------------#
# DONNEES
#-----------------------------------#
# Chargement des donnees et packages
load("COMADRE_v.2.0.1.RData")
if (!require(popbio)) install.packages("popbio")
library(popbio)
# Recuperation des donnees
idUrsus <- which(comadre$metadata$SpeciesAccepted == "Ursus_maritimus")
cat(idUrsus)
# 6 matrices issues de l'etude de Hunter, Caswell, Runge et al. (2010)
comadre$metadata[idUrsus,]
# recuperer les references bibliographiques
biblio <- comadre$metadata[idUrsus, c("Authors", "Journal", "YearPublication","DOI.ISBN")]
biblio
# recuperer les 6 matrices 2001-2005
UrsusMean <- comadre$mat[[idUrsus[1]]]$matA # Matrice de la valeur moyenne sur les 5 années
# Matrices annuelles
Ursus2001 <- comadre$mat[[idUrsus[2]]]$matA
Ursus2002 <- comadre$mat[[idUrsus[3]]]$matA
Ursus2003 <- comadre$mat[[idUrsus[4]]]$matA
Ursus2004 <- comadre$mat[[idUrsus[5]]]$matA
Ursus2005 <- comadre$mat[[idUrsus[6]]]$matA
UrsusMean
Ursus2001
Ursus2002
Ursus2003
Ursus2004
Ursus2005
# identifier les classes de la matrice
stages <- comadre$matrixClass[[idUrsus[1]]]$MatrixClassAuthor
stages
fundamental.matrix(UrsusMean$T)$N
fundamental.matrix(UrsusMean)$N
fundamental.matrix(UrsusMean)
# Temps moyen dans chaque classe $N
fundamental.matrix(UrsusMean)$N
net.reproductive.rate(UrsusMean)
# temps de génération : temps nécessaire pour une croissance d'un facteur R0
generation.time(UrsusMean)
# valeur de reproduction
reproductive.value(UrsusMean)
net.reproductive.rate(UrsusMean)
# Taux d'accroissement asymptotique stochastique
stoch.growth.rate(UrsusMean)
?class
setwd("~/Documents/GitHub/PenvinsCup_2017")
ind <- read.table("b30ind.txt", header = TRUE, sep=",")
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
ind <- read.table("b30ind.txt", header = TRUE, sep=",")
quad <- read.table("b30quad.txt", header = TRUE)
ind <- read.table("b30ind.txt", header = TRUE, sep=",")
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
head(ind)
setwd("~/Documents/GitHub/PenvinsCup_2017")
ind <- read.table("b30ind.txt", header = TRUE, sep=",")
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
str(ind)
str(quad)
ind <- read.table("b30ind.txt", header = TRUE)
quad <- read.table("b30quad.txt", header = TRUE)
head(quad)
head(ind)
str(ind)
str(quad)
ind <- read.table("data\b30indCORR.txt", header = TRUE)
ind <- read.table("data/b30indCORR.txt", header = TRUE)
quad <- read.table("data/b30quadCOOR.txt", header = TRUE)
quad <- read.table("data/b30quadCORR.txt", header = TRUE)
head(quad)
head(ind)
str(ind)
str(quad)
?regexpr
grep("ae", "aeternity")
grep("ae", "eternity")
if (grep("ae", "eternity")) {print("yes")} else {print("no")}
if (regexpr("ae", "eternity")) {print("yes")} else {print("no")}
getSrcFilename(ind)
getSrcref(ind)
getSrcLocation(ind)
ind <- read.table("data/b30indCORR.txt", header = TRUE)
getSrcFilename(ind)
getSrcFilename(ind, full.names = TRUE)
knit(ind)
current_input(ind)
inf
ind
file.access(ind)
file.info(ind)
ind[1,1]
